// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/calculator.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SumRequest struct {
	Number1              int64    `protobuf:"varint,1,opt,name=number1,proto3" json:"number1,omitempty"`
	Number2              int64    `protobuf:"varint,2,opt,name=number2,proto3" json:"number2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{0}
}
func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (dst *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(dst, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetNumber1() int64 {
	if m != nil {
		return m.Number1
	}
	return 0
}

func (m *SumRequest) GetNumber2() int64 {
	if m != nil {
		return m.Number2
	}
	return 0
}

type ResultResponse struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultResponse) Reset()         { *m = ResultResponse{} }
func (m *ResultResponse) String() string { return proto.CompactTextString(m) }
func (*ResultResponse) ProtoMessage()    {}
func (*ResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{1}
}
func (m *ResultResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultResponse.Unmarshal(m, b)
}
func (m *ResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultResponse.Marshal(b, m, deterministic)
}
func (dst *ResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultResponse.Merge(dst, src)
}
func (m *ResultResponse) XXX_Size() int {
	return xxx_messageInfo_ResultResponse.Size(m)
}
func (m *ResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResultResponse proto.InternalMessageInfo

func (m *ResultResponse) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PrimeNumberRequest struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumberRequest) Reset()         { *m = PrimeNumberRequest{} }
func (m *PrimeNumberRequest) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberRequest) ProtoMessage()    {}
func (*PrimeNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{2}
}
func (m *PrimeNumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberRequest.Unmarshal(m, b)
}
func (m *PrimeNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberRequest.Marshal(b, m, deterministic)
}
func (dst *PrimeNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberRequest.Merge(dst, src)
}
func (m *PrimeNumberRequest) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberRequest.Size(m)
}
func (m *PrimeNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberRequest proto.InternalMessageInfo

func (m *PrimeNumberRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PrimeNumberResponse struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeNumberResponse) Reset()         { *m = PrimeNumberResponse{} }
func (m *PrimeNumberResponse) String() string { return proto.CompactTextString(m) }
func (*PrimeNumberResponse) ProtoMessage()    {}
func (*PrimeNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{3}
}
func (m *PrimeNumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeNumberResponse.Unmarshal(m, b)
}
func (m *PrimeNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeNumberResponse.Marshal(b, m, deterministic)
}
func (dst *PrimeNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeNumberResponse.Merge(dst, src)
}
func (m *PrimeNumberResponse) XXX_Size() int {
	return xxx_messageInfo_PrimeNumberResponse.Size(m)
}
func (m *PrimeNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeNumberResponse proto.InternalMessageInfo

func (m *PrimeNumberResponse) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type NumberRequest struct {
	Number               float32  `protobuf:"fixed32,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberRequest) Reset()         { *m = NumberRequest{} }
func (m *NumberRequest) String() string { return proto.CompactTextString(m) }
func (*NumberRequest) ProtoMessage()    {}
func (*NumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{4}
}
func (m *NumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberRequest.Unmarshal(m, b)
}
func (m *NumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberRequest.Marshal(b, m, deterministic)
}
func (dst *NumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberRequest.Merge(dst, src)
}
func (m *NumberRequest) XXX_Size() int {
	return xxx_messageInfo_NumberRequest.Size(m)
}
func (m *NumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumberRequest proto.InternalMessageInfo

func (m *NumberRequest) GetNumber() float32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type ComputedAverageResponse struct {
	Average              float32  `protobuf:"fixed32,1,opt,name=average,proto3" json:"average,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputedAverageResponse) Reset()         { *m = ComputedAverageResponse{} }
func (m *ComputedAverageResponse) String() string { return proto.CompactTextString(m) }
func (*ComputedAverageResponse) ProtoMessage()    {}
func (*ComputedAverageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{5}
}
func (m *ComputedAverageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputedAverageResponse.Unmarshal(m, b)
}
func (m *ComputedAverageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputedAverageResponse.Marshal(b, m, deterministic)
}
func (dst *ComputedAverageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputedAverageResponse.Merge(dst, src)
}
func (m *ComputedAverageResponse) XXX_Size() int {
	return xxx_messageInfo_ComputedAverageResponse.Size(m)
}
func (m *ComputedAverageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputedAverageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComputedAverageResponse proto.InternalMessageInfo

func (m *ComputedAverageResponse) GetAverage() float32 {
	if m != nil {
		return m.Average
	}
	return 0
}

type MaximumNumberRequest struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaximumNumberRequest) Reset()         { *m = MaximumNumberRequest{} }
func (m *MaximumNumberRequest) String() string { return proto.CompactTextString(m) }
func (*MaximumNumberRequest) ProtoMessage()    {}
func (*MaximumNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{6}
}
func (m *MaximumNumberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaximumNumberRequest.Unmarshal(m, b)
}
func (m *MaximumNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaximumNumberRequest.Marshal(b, m, deterministic)
}
func (dst *MaximumNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaximumNumberRequest.Merge(dst, src)
}
func (m *MaximumNumberRequest) XXX_Size() int {
	return xxx_messageInfo_MaximumNumberRequest.Size(m)
}
func (m *MaximumNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MaximumNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MaximumNumberRequest proto.InternalMessageInfo

func (m *MaximumNumberRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type MaximumNumberResponse struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MaximumNumberResponse) Reset()         { *m = MaximumNumberResponse{} }
func (m *MaximumNumberResponse) String() string { return proto.CompactTextString(m) }
func (*MaximumNumberResponse) ProtoMessage()    {}
func (*MaximumNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{7}
}
func (m *MaximumNumberResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MaximumNumberResponse.Unmarshal(m, b)
}
func (m *MaximumNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MaximumNumberResponse.Marshal(b, m, deterministic)
}
func (dst *MaximumNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MaximumNumberResponse.Merge(dst, src)
}
func (m *MaximumNumberResponse) XXX_Size() int {
	return xxx_messageInfo_MaximumNumberResponse.Size(m)
}
func (m *MaximumNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MaximumNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MaximumNumberResponse proto.InternalMessageInfo

func (m *MaximumNumberResponse) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootRequest struct {
	Number               int64    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootRequest) Reset()         { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()    {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{8}
}
func (m *SquareRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootRequest.Unmarshal(m, b)
}
func (m *SquareRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootRequest.Marshal(b, m, deterministic)
}
func (dst *SquareRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootRequest.Merge(dst, src)
}
func (m *SquareRootRequest) XXX_Size() int {
	return xxx_messageInfo_SquareRootRequest.Size(m)
}
func (m *SquareRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootRequest proto.InternalMessageInfo

func (m *SquareRootRequest) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type SquareRootResponse struct {
	NumberRoot           float64  `protobuf:"fixed64,1,opt,name=number_root,json=numberRoot,proto3" json:"number_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootResponse) Reset()         { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()    {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calculator_507c8e4f0799e7ee, []int{9}
}
func (m *SquareRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootResponse.Unmarshal(m, b)
}
func (m *SquareRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootResponse.Marshal(b, m, deterministic)
}
func (dst *SquareRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootResponse.Merge(dst, src)
}
func (m *SquareRootResponse) XXX_Size() int {
	return xxx_messageInfo_SquareRootResponse.Size(m)
}
func (m *SquareRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootResponse proto.InternalMessageInfo

func (m *SquareRootResponse) GetNumberRoot() float64 {
	if m != nil {
		return m.NumberRoot
	}
	return 0
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "calculator.SumRequest")
	proto.RegisterType((*ResultResponse)(nil), "calculator.ResultResponse")
	proto.RegisterType((*PrimeNumberRequest)(nil), "calculator.PrimeNumberRequest")
	proto.RegisterType((*PrimeNumberResponse)(nil), "calculator.PrimeNumberResponse")
	proto.RegisterType((*NumberRequest)(nil), "calculator.NumberRequest")
	proto.RegisterType((*ComputedAverageResponse)(nil), "calculator.ComputedAverageResponse")
	proto.RegisterType((*MaximumNumberRequest)(nil), "calculator.MaximumNumberRequest")
	proto.RegisterType((*MaximumNumberResponse)(nil), "calculator.MaximumNumberResponse")
	proto.RegisterType((*SquareRootRequest)(nil), "calculator.SquareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "calculator.SquareRootResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	// Unary
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*ResultResponse, error)
	// Server Streaming
	PrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberClient, error)
	// Client Streaming
	Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClient, error)
	// BiDi Streaming
	MaximumNumber(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MaximumNumberClient, error)
	// error handling
	// this RPC will throw an exception if the sent number is negative
	// The error being sent is of type INVALID_ARGUMENT
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
}

type calculatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorServiceClient(cc *grpc.ClientConn) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*ResultResponse, error) {
	out := new(ResultResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) PrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalculatorService_PrimeNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[0], "/calculator.CalculatorService/PrimeNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServicePrimeNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_PrimeNumberClient interface {
	Recv() (*PrimeNumberResponse, error)
	grpc.ClientStream
}

type calculatorServicePrimeNumberClient struct {
	grpc.ClientStream
}

func (x *calculatorServicePrimeNumberClient) Recv() (*PrimeNumberResponse, error) {
	m := new(PrimeNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[1], "/calculator.CalculatorService/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceAverageClient{stream}
	return x, nil
}

type CalculatorService_AverageClient interface {
	Send(*NumberRequest) error
	CloseAndRecv() (*ComputedAverageResponse, error)
	grpc.ClientStream
}

type calculatorServiceAverageClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceAverageClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceAverageClient) CloseAndRecv() (*ComputedAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputedAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) MaximumNumber(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_MaximumNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[2], "/calculator.CalculatorService/MaximumNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceMaximumNumberClient{stream}
	return x, nil
}

type CalculatorService_MaximumNumberClient interface {
	Send(*MaximumNumberRequest) error
	Recv() (*MaximumNumberResponse, error)
	grpc.ClientStream
}

type calculatorServiceMaximumNumberClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceMaximumNumberClient) Send(m *MaximumNumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceMaximumNumberClient) Recv() (*MaximumNumberResponse, error) {
	m := new(MaximumNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := c.cc.Invoke(ctx, "/calculator.CalculatorService/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
type CalculatorServiceServer interface {
	// Unary
	Sum(context.Context, *SumRequest) (*ResultResponse, error)
	// Server Streaming
	PrimeNumber(*PrimeNumberRequest, CalculatorService_PrimeNumberServer) error
	// Client Streaming
	Average(CalculatorService_AverageServer) error
	// BiDi Streaming
	MaximumNumber(CalculatorService_MaximumNumberServer) error
	// error handling
	// this RPC will throw an exception if the sent number is negative
	// The error being sent is of type INVALID_ARGUMENT
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_PrimeNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).PrimeNumber(m, &calculatorServicePrimeNumberServer{stream})
}

type CalculatorService_PrimeNumberServer interface {
	Send(*PrimeNumberResponse) error
	grpc.ServerStream
}

type calculatorServicePrimeNumberServer struct {
	grpc.ServerStream
}

func (x *calculatorServicePrimeNumberServer) Send(m *PrimeNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Average(&calculatorServiceAverageServer{stream})
}

type CalculatorService_AverageServer interface {
	SendAndClose(*ComputedAverageResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type calculatorServiceAverageServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceAverageServer) SendAndClose(m *ComputedAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceAverageServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_MaximumNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).MaximumNumber(&calculatorServiceMaximumNumberServer{stream})
}

type CalculatorService_MaximumNumberServer interface {
	Send(*MaximumNumberResponse) error
	Recv() (*MaximumNumberRequest, error)
	grpc.ServerStream
}

type calculatorServiceMaximumNumberServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceMaximumNumberServer) Send(m *MaximumNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceMaximumNumberServer) Recv() (*MaximumNumberRequest, error) {
	m := new(MaximumNumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.CalculatorService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CalculatorService_Sum_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _CalculatorService_SquareRoot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumber",
			Handler:       _CalculatorService_PrimeNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _CalculatorService_Average_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MaximumNumber",
			Handler:       _CalculatorService_MaximumNumber_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/calculator.proto",
}

func init() { proto.RegisterFile("pb/calculator.proto", fileDescriptor_calculator_507c8e4f0799e7ee) }

var fileDescriptor_calculator_507c8e4f0799e7ee = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x29, 0x18, 0x48, 0x86, 0x60, 0xc2, 0xa0, 0x58, 0x9b, 0x08, 0x58, 0x0f, 0x92, 0xa8,
	0xa0, 0x10, 0x4f, 0x5e, 0x54, 0xce, 0x18, 0xb3, 0xbd, 0x71, 0x31, 0x2d, 0x6e, 0x0c, 0x09, 0xcb,
	0x96, 0xed, 0x2e, 0xf1, 0xd3, 0xf8, 0x59, 0x8d, 0xfd, 0x43, 0xb7, 0x68, 0xa9, 0xc7, 0x99, 0xf7,
	0xe6, 0x75, 0xd2, 0xdf, 0x2c, 0xb4, 0x7c, 0x6f, 0x38, 0x77, 0x97, 0x73, 0xb5, 0x74, 0x25, 0x17,
	0x03, 0x5f, 0x70, 0xc9, 0x11, 0xd2, 0x8e, 0xfd, 0x08, 0xe0, 0x28, 0x46, 0xe8, 0x5a, 0xd1, 0x40,
	0xa2, 0x09, 0xb5, 0x95, 0x62, 0x1e, 0x15, 0x77, 0xa6, 0xd1, 0x33, 0xfa, 0x15, 0x92, 0x94, 0xa9,
	0x32, 0x32, 0xcb, 0xba, 0x32, 0xb2, 0xfb, 0x70, 0x48, 0x68, 0xa0, 0x96, 0x92, 0xd0, 0xc0, 0xe7,
	0xab, 0x80, 0x62, 0x1b, 0xaa, 0x91, 0x18, 0x87, 0xc4, 0x95, 0x7d, 0x0d, 0xf8, 0x2a, 0x16, 0x8c,
	0xbe, 0x84, 0x65, 0xf2, 0xcd, 0x3c, 0xf7, 0x0d, 0xb4, 0x32, 0xee, 0x82, 0xf0, 0x4b, 0x68, 0xec,
	0xcb, 0x2d, 0x6f, 0x8d, 0x63, 0x38, 0x99, 0x70, 0xe6, 0x2b, 0x49, 0xdf, 0x9f, 0x36, 0x54, 0xb8,
	0x1f, 0x74, 0x9b, 0x6d, 0x42, 0xcd, 0x8d, 0x5a, 0xf1, 0x4c, 0x52, 0xda, 0x03, 0x38, 0x9a, 0xba,
	0x9f, 0x0b, 0xa6, 0xd8, 0xff, 0x96, 0x1f, 0xc2, 0xf1, 0x8e, 0xbf, 0x60, 0xfd, 0x2b, 0x68, 0x3a,
	0x6b, 0xe5, 0x0a, 0x4a, 0x38, 0x97, 0x45, 0xe9, 0xf7, 0x80, 0xba, 0x39, 0x8e, 0xee, 0x42, 0x3d,
	0xd2, 0xdf, 0x04, 0xe7, 0x32, 0x1c, 0x31, 0x08, 0x44, 0xad, 0x1f, 0xe3, 0xe8, 0xab, 0x02, 0xcd,
	0xc9, 0x16, 0xbd, 0x43, 0xc5, 0x66, 0x31, 0xa7, 0xf8, 0x00, 0x15, 0x47, 0x31, 0x6c, 0x0f, 0xb4,
	0x3b, 0x49, 0x4f, 0xc2, 0xb2, 0xf4, 0x7e, 0x16, 0xb4, 0x5d, 0x42, 0x02, 0x75, 0x0d, 0x12, 0x76,
	0x74, 0xf3, 0x6f, 0xd6, 0x56, 0x37, 0x57, 0x4f, 0x12, 0x6f, 0x0d, 0x9c, 0x42, 0x2d, 0x06, 0x83,
	0xa7, 0xba, 0x3f, 0x1b, 0x75, 0xa1, 0x4b, 0x39, 0x40, 0xed, 0x52, 0xdf, 0xc0, 0x19, 0x34, 0x32,
	0x28, 0xb0, 0xa7, 0x4f, 0xfe, 0x45, 0xd5, 0x3a, 0xdf, 0xe3, 0x48, 0x93, 0xc3, 0x55, 0x21, 0x05,
	0x81, 0x67, 0x99, 0x5f, 0xb8, 0x4b, 0xd3, 0xea, 0xe4, 0xc9, 0x49, 0xe4, 0xf3, 0xc1, 0xac, 0xec,
	0x7b, 0x5e, 0x35, 0x7c, 0xa5, 0xe3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x3a, 0x70, 0x2a,
	0xbc, 0x03, 0x00, 0x00,
}
